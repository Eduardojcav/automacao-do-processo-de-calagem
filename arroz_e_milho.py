# -*- coding: utf-8 -*-
"""arroz e milho.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PKN75AdQ3dXE3d4CQOXD_706oEAfvQxO
"""

# 1. Instalar o YOLOv8
!pip install ultralytics --quiet

from google.colab import drive
drive.mount('/content/drive')

# Caminho completo do seu arquivo zip no Drive
zip_path = '/content/drive/MyDrive/demarcacao de cacamba.v2i.yolov8.zip'

!ls /content/dataset

# Descompactar para /content/dataset
!unzip -q "$zip_path" -d /content/dataset

# Verificar os arquivos extra√≠dos
!ls /content/dataset/train/images
!ls /content/dataset/valid/images

# Criar o arquivo data.yaml corrigido
data_yaml = """
path: /content/dataset
train: train/images
val: valid/images
names: ['cacamba']
"""

with open("/content/data.yaml", "w") as f:
    f.write(data_yaml)


# 6. Treinar o modelo YOLOv8
from ultralytics import YOLO
model = YOLO('yolov8n.yaml')  # vers√£o 'nano'
model.train(data="/content/data.yaml", epochs=40)

!ls "/content/drive/MyDrive/videos_teste"

!pip install ultralytics --quiet

from google.colab import drive
from ultralytics import YOLO
from IPython.display import Video, display
import os

# 1. Montar o Google Drive
drive.mount('/content/drive')

# 2. Carregar o modelo treinado (ajuste se necess√°rio)
model = YOLO('/content/runs/detect/train7/weights/best.pt')

# 3. Lista com os nomes reais dos v√≠deos
video_names = [
    'caminhoes.mp4',     # o primeiro v√≠deo
    'caminhoes1.mp4',
    'Caminhoes2.mp4',
    'Caminhoes3.mp4',
    'Caminhoes4.mp4',
    'Caminhoes5.mp4',
    'Caminhoes6.mp4',
    'Caminhoes7.mp4',
    'Caminhoes8.mp4',
    'Caminhoes9.mp4'
]

# 4. Caminho base dos v√≠deos no Drive
drive_folder = '/content/drive/MyDrive/videos_teste'

# 5. Loop para predi√ß√£o e exibi√ß√£o
for idx, video_name in enumerate(video_names, start=1):
    video_path = os.path.join(drive_folder, video_name)
    predict_name = f'predict_video{idx}'

    print(f"\nüîç Processando v√≠deo {idx}: {video_name} ...")

    # Rodar predi√ß√£o
    results = model.predict(
        source=video_path,
        save=True,
        conf=0.5,
        project='runs/detect',
        name=predict_name
    )

    # Caminho do v√≠deo gerado
    predicted_video_path = f'/content/runs/detect/{predict_name}/{video_name}'

    # Exibir v√≠deo
    print(f"üé¨ Resultado do v√≠deo {idx}:")
    display(Video(predicted_video_path, embed=True))

"""# Nova se√ß√£o"""

import os
import shutil
import subprocess

# Lista exata dos nomes de entrada dos v√≠deos
video_names = [
    'caminhoes.mp4',
    'caminhoes1.mp4',
    'Caminhoes2.mp4',
    'Caminhoes3.mp4',
    'Caminhoes4.mp4',
    'Caminhoes5.mp4',
    'Caminhoes6.mp4',
    'Caminhoes7.mp4',
    'Caminhoes8.mp4',
    'Caminhoes9.mp4'
]

# Caminho da pasta de destino no Drive
dest_folder = '/content/drive/MyDrive/videos_resultado'
os.makedirs(dest_folder, exist_ok=True)

# Loop pelos v√≠deos
for idx, original_name in enumerate(video_names, start=1):
    avi_path = f'/content/runs/detect/predict_video{idx}/{original_name.replace(".mp4", ".avi")}'
    mp4_path = f'/content/runs/detect/predict_video{idx}/{original_name}'
    target_path = os.path.join(dest_folder, original_name)

    if os.path.exists(avi_path):
        print(f'üé¨ Convertendo {avi_path} para .mp4...')
        # Converter .avi para .mp4 usando ffmpeg
        subprocess.run(['ffmpeg', '-y', '-i', avi_path, '-c:v', 'libx264', '-preset', 'fast', '-crf', '22', mp4_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # Copiar para o Drive
        if os.path.exists(mp4_path):
            shutil.copy(mp4_path, target_path)
            print(f'‚úÖ Copiado: {original_name}')
        else:
            print(f'‚ö†Ô∏è Falha ao converter para .mp4: {mp4_path}')
    else:
        print(f'‚ö†Ô∏è Arquivo .avi n√£o encontrado: {avi_path}')